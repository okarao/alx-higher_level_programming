7-base_geometry test file
Test cases for function integer_validator

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

#Test with positive integer
>>> bg.integer_validator("number", 12)

#Test with negative integer
>>> bg.integer_validator("number", -12)
Traceback (most recent call last):
ValueError: number must be greater than 0

# Test Case 1: Too Many Arguments
>>> bg.integer_validator("number", 2, 3)
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given

# Test Case 2: Missing One Argument
>>> bg.integer_validator("my_int")
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

# Test Case 3: Missing All Arguments
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

#Test with infinite integer
>>> bg.integer_validator("number", int('inf'))
Traceback (most recent call last):
ValueError: invalid literal for int() with base 10: 'inf'

>>> bg.integer_validator("", 22)

>>> bg.integer_validator("", "22")
Traceback (most recent call last):
TypeError:  must be an integer

>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> bg.integer_validator("my_int", 0)
Traceback (most recent call last):
ValueError: my_int must be greater than 0

>>> bg.integer_validator("list", [0, 1, 2])
Traceback (most recent call last):
TypeError: list must be an integer

>>> bg.integer_validator("my_int", {2, 1})
Traceback (most recent call last):
TypeError: my_int must be an integer

>>> bg.integer_validator("my_int", None)
Traceback (most recent call last):
TypeError: my_int must be an integer

>>> bg.integer_validator("my_int", (2,))
Traceback (most recent call last):
TypeError: my_int must be an integer
